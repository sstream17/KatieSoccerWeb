@page "/"
@inject Blazored.LocalStorage.ILocalStorageService localStorage


<div class="column center space-evenly">
    <h1>Katie Soccer</h1>
    <div class="row center">
        <h3>Name</h3>
        <input type="text"
               placeholder="Player8002"
               value="@Name"
               @onchange="@OnNameChanged" />
    </div>
    <div class="row center">
        <h3>Color</h3>
        <input type="color"
               value="@Color"
               @onchange="@OnColorChanged" />
    </div>
    <div class="row space-evenly">
        <div class="column center space-evenly w-100">
            <h2>Play Local</h2>
            <div class="row center space-evenly">
                <a href="/play">vs. Bot</a>
                <a href="/play">vs. Human</a>
            </div>
        </div>
        <div class="column center space-evenly w-100">
            <h2>Play Online</h2>
            <div class="row center space-evenly">
                <a href="/play/1234">Create Match</a>
                <a href="/play/1234">Join Match</a>
            </div>
        </div>
    </div>
</div>

@code {
    private const string nameKey = "name";
    private const string colorKey = "color";

    private string Name { get; set; }
    private string Color { get; set; }

    private string RandomName()
    {
        var random = new Random();
        var number = random.Next(0, 10000).ToString("D4");
        return $"Player{number}";
    }

    private string RandomColor()
    {
        var random = new Random();
        return String.Format("#{0:X6}", random.Next(0x1000000));
    }

    protected override async Task OnInitializedAsync()
    {
        Name = await localStorage.GetItemAsync<string>(nameKey);
        if (string.IsNullOrEmpty(Name))
        {
            Name = RandomName();
            await SaveToLocalStorage(nameKey, Name);
        }

        Color = await localStorage.GetItemAsync<string>(colorKey);
        if (string.IsNullOrEmpty(Color))
        {
            Color = RandomColor();
            await SaveToLocalStorage(colorKey, Color);
        }
    }

    private async Task SaveToLocalStorage(string key, string value)
    {
        await localStorage.SetItemAsync(key, value);
    }

    private async void OnNameChanged(ChangeEventArgs e)
    {
        var value = e.Value.ToString();
        Name = value;
        await SaveToLocalStorage(nameKey, value);
    }

    private async void OnColorChanged(ChangeEventArgs e)
    {
        var value = e.Value.ToString();
        Color = value;
        await SaveToLocalStorage(colorKey, value);
    }
}
